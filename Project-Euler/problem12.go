// Problem 12
// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
// 
// Let us list the factors of the first seven triangle numbers:
//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
// What is the value of the first triangle number to have over five hundred divisors?

package main

import "fmt"

func make_crivo(limit int) []bool {
	crivo := make([]bool, limit + 1)
	for i := range(crivo) {
		crivo[i] = true
	}
	crivo[0], crivo[1] = false, false
	for i, v := range(crivo) {
		if v {
			for j := 2 * i; j <= limit; j += i {
				crivo[j] = false
			}
		}
	}
	return crivo
}

func how_many_prime_factors(crivo []bool, value uint64) (uint64) {
	var count uint64 = 1
	for i, v := range(crivo) {
		if value == 1 {
			return count
		}
		if v && value % uint64(i) == 0 {
			p := 1
			for value /= uint64(i); value % uint64(i) == 0; value /= uint64(i) {
				p += 1
			}
			count *= uint64(p + 1)
		}
	}
	return count
}	

func main() {
	const target = 500
	const limit = 200000
	crivo := make_crivo(limit - 1)
	for i, S := 1, 0; true; i++ {
		S += i
		div := how_many_prime_factors(crivo, uint64(S))		
//		fmt.Printf("%6d -> %10d: %4d divisors\n", i, S, div)
		if div > target {
			fmt.Printf("Found: %d, the %dth triangle number, is the first to have more than %d divisors: it has %d divisors.\n",
				S, i, target, div)
			break
		}
	}
}
